from bot import dp, types, FSMContext
from motor_client import SingletonClient
from loguru import logger
from bson.objectid import ObjectId
from datetime import datetime


@dp.message_handler(lambda message: message.chat.type == 'private', commands=['list'])
async def contributions_list(message: types.Message):
    logger.info('check contributions_list')
    db = SingletonClient.get_data_base()

    user = await db.Users.find_one({'telegram_id': message.from_user.id})
    if not user:
        return await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start')

    if not user.get('treasurer'):
        return await message.answer('–í—ã –Ω–µ –∫–∞–∑–Ω–∞—á–µ–π.')

    string = '–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'

    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton(text='‚úÖ –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='conlist,accepted,show'))
    markup.add(types.InlineKeyboardButton(text='üî• –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='conlist,declined,show'))
    markup.add(types.InlineKeyboardButton(text='‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='conlist,banned,show'))

    await message.answer(string, reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('conlist') and
                           callback_query.data.endswith('show'))
async def show_list(callback_query: types.CallbackQuery):
    db = SingletonClient.get_data_base()

    user = await db.Users.find_one({'telegram_id': callback_query.from_user.id})
    region = await db.Regions.find_one({'_id': user['region']})
    status = callback_query.data.split(',')[1]
    payments = await get_contributions_list(region['_id'], status, 0)
    if not payments:
        return await callback_query.answer('–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')

    markup = types.InlineKeyboardMarkup()
    for payment in payments:
        payer = await db.Users.find_one({'_id': payment['payer']})
        fio = f"{payer['second_name']} {payer['first_name'][:1]}.{payer['third_name'][:1]}."
        markup.add(types.InlineKeyboardButton(text=f"{fio} {payment['payment_date']}", callback_data=f"{payment['_id']}"))

    if await get_contributions_list(region['_id'], status, 1):
        button_1 = types.InlineKeyboardButton(text="‚ùå", callback_data=f'conlist,n,0,{status}')
        button_2 = types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f'conlist,r,1,{status}')
        markup.row(button_1, button_2)

    markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f"conlist,back"))
    string = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º'
    await callback_query.message.edit_text(string, reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.split(',')[0] == 'conlist' and
                           callback_query.data.split(',')[1] == 'back')
async def handle_conlist_callback_query(callback_query: types.CallbackQuery):
    string = '–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å'

    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton(text='‚úÖ –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='conlist,accepted,show'))
    markup.add(types.InlineKeyboardButton(text='üî• –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='conlist,declined,show'))
    markup.add(
        types.InlineKeyboardButton(text='‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='conlist,banned,show'))
    # todo: –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –∑–∞–±–∞–Ω–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    await callback_query.message.edit_text(string, reply_markup=markup)


@dp.callback_query_handler(lambda callback_query: callback_query.data.split(',')[0] == 'conlist')
async def handle_conlist_callback_query(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–ª–µ–≤–æ –∏–ª–∏ –≤–ø—Ä–∞–≤–æ.
    –õ—è–º–±–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ y –∫–Ω–æ–ø–∫–∏
    Args:
        callback_query (types.CallbackQuery): –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """

    # todo: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–ª–∞—Ç–µ–∂–∏
    split_data = callback_query.data.split(',')
    if split_data[1] == 'n':
        return await callback_query.answer(text='–¢–∞–º –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...')

    db = SingletonClient.get_data_base()
    page = int(split_data[2])
    status = split_data[3]
    logger.info(f"contibutions list page {page} status {status}")

    user = await db.Users.find_one({'telegram_id': callback_query.from_user.id})
    region = await db.Regions.find_one({'_id': user['region']})
    payments = await get_contributions_list(region['_id'], status, page)

    markup = types.InlineKeyboardMarkup()
    for payment in payments:
        payer = await db.Users.find_one({'_id': payment['payer']})
        fio = f"{payer['second_name']} {payer['first_name'][:1]}.{payer['third_name'][:1]}."
        markup.add(
            types.InlineKeyboardButton(text=f"{fio} {payment['payment_date']}", callback_data=f"{payment['_id']}"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.
    _payments = await get_contributions_list(region['_id'], status, page - 1)
    if _payments:
        left_button = types.InlineKeyboardButton(
            text='‚¨ÖÔ∏è', callback_data=f'conlist,l,{page - 1},{status}')
    else:
        left_button = types.InlineKeyboardButton(
            text='‚ùå', callback_data=f'conlist,n,{page},{status}')

    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö.
    _payments = await get_contributions_list(region['_id'], status, page + 1)
    if _payments:
        right_button = types.InlineKeyboardButton(
            text='‚û°Ô∏è', callback_data=f'conlist,r,{page + 1},{status}')
    else:
        right_button = types.InlineKeyboardButton(
            text='‚ùå', callback_data=f'conlist,n,{page},{status}')

    markup.row(left_button, right_button)

    markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f"conlist,back"))
    _message = await callback_query.message.edit_reply_markup(reply_markup=markup)
    await callback_query.answer()


async def get_contributions_list(region_id, status, page):
    db = SingletonClient.get_data_base()
    logger.info(f"get contrib list region_id {region_id} status {status} page {page}")
    contributions_cursor = db.Payments.find({
        "region": ObjectId(region_id),
        'status': status
    })

    contrib_list = await contributions_cursor.to_list(length=await db.Payments.count_documents({}))

    try:
        return contrib_list[page * 5: page * 5 + 5]
    except IndexError:
        return []